// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/gorouter/proxy/round_tripper"
)

type FakeRetryableClassifier struct {
	IsRetryableStub        func(err error) bool
	isRetryableMutex       sync.RWMutex
	isRetryableArgsForCall []struct {
		err error
	}
	isRetryableReturns struct {
		result1 bool
	}
}

func (fake *FakeRetryableClassifier) IsRetryable(err error) bool {
	fake.isRetryableMutex.Lock()
	fake.isRetryableArgsForCall = append(fake.isRetryableArgsForCall, struct {
		err error
	}{err})
	fake.isRetryableMutex.Unlock()
	if fake.IsRetryableStub != nil {
		return fake.IsRetryableStub(err)
	} else {
		return fake.isRetryableReturns.result1
	}
}

func (fake *FakeRetryableClassifier) IsRetryableCallCount() int {
	fake.isRetryableMutex.RLock()
	defer fake.isRetryableMutex.RUnlock()
	return len(fake.isRetryableArgsForCall)
}

func (fake *FakeRetryableClassifier) IsRetryableArgsForCall(i int) error {
	fake.isRetryableMutex.RLock()
	defer fake.isRetryableMutex.RUnlock()
	return fake.isRetryableArgsForCall[i].err
}

func (fake *FakeRetryableClassifier) IsRetryableReturns(result1 bool) {
	fake.IsRetryableStub = nil
	fake.isRetryableReturns = struct {
		result1 bool
	}{result1}
}

var _ round_tripper.RetryableClassifier = new(FakeRetryableClassifier)
